# get makefile path in unix format
MAKEFILE_DIR := $(dir $(lastword $(MAKEFILE_LIST)))
MAKEFILE_DIR := $(subst \,/,$(MAKEFILE_DIR))

# test if we have access to SGDK environment, if so we can override the GDK var
ifneq ($(wildcard $(MAKEFILE_DIR)bin/rescomp.jar),)
	GDK := $(patsubst %/,%,$(MAKEFILE_DIR))
else
    $(warning Cannot find SGDK environment ! Current folder = '${MAKEFILE_DIR}')
endif

include $(GDK)/common.mk

BUILD_TYPE := release
ifeq ($(MAKECMDGOALS),debug)
  	BUILD_TYPE := debug
else ifeq ($(MAKECMDGOALS),Debug)
  	BUILD_TYPE := debug
else ifeq ($(MAKECMDGOALS),clean-debug)
  	BUILD_TYPE := debug
else ifeq ($(MAKECMDGOALS),asm)
  	BUILD_TYPE := asm
else ifeq ($(MAKECMDGOALS),Asm)
  	BUILD_TYPE := asm
else ifeq ($(MAKECMDGOALS),clean-asm)
  	BUILD_TYPE := asm
endif

CLEAN := FALSE
ifeq ($(findstring clean,$(MAKECMDGOALS)),clean)
	CLEAN := TRUE
endif

SRC_DIR := src
RES_DIR := res
INC_DIR := inc
OUT_DIR := out/$(BUILD_TYPE)
DEP_DIR = $(OUT_DIR)/_deps
OUT_DIR_LIB := $(GDK)/$(OUT_DIR)


SRC_C = $(wildcard *.c)
SRC_C += $(wildcard $(SRC_DIR)/*.c)
SRC_C += $(wildcard $(SRC_DIR)/*/*.c)
SRC_C += $(wildcard $(SRC_DIR)/*/*/*.c)
SRC_C := $(filter-out $(SRC_DIR)/boot/rom_head.c,$(SRC_C))
SRC_S = $(wildcard *.s)
SRC_S += $(wildcard $(SRC_DIR)/*.s)
SRC_S += $(wildcard $(SRC_DIR)/*/*.s)
SRC_S += $(wildcard $(SRC_DIR)/*/*/*.s)
SRC_S := $(filter-out $(SRC_DIR)/boot/sega.s,$(SRC_S))
SRC_ASM = $(wildcard *.asm)
SRC_ASM += $(wildcard $(SRC_DIR)/*.asm)
SRC_ASM += $(wildcard $(SRC_DIR)/*/*.asm)
SRC_ASM += $(wildcard $(SRC_DIR)/*/*/*.asm)
SRC_ASM := $(SRC_ASM)
SRC_S80 = $(wildcard *.s80)
SRC_S80 += $(wildcard $(SRC_DIR)/*.s80)
SRC_S80 += $(wildcard $(SRC_DIR)/*/*.s80)
SRC_S80 += $(wildcard $(SRC_DIR)/*/*/*.s80)
SRC_S80 := $(SRC_S80)

RES_RES = $(wildcard *.res)
RES_RES += $(wildcard $(RES_DIR)/*.res)
RES_RES := $(RES_RES)

OBJS = $(RES_RES:.res=.o)
OBJS += $(SRC_S80:.s80=.o)
OBJS += $(SRC_ASM:.asm=.o)
OBJS += $(SRC_S:.s=.o)
OBJS += $(SRC_C:.c=.o)
OBJS := $(addprefix $(OUT_DIR)/, $(OBJS))

LSTS := $(SRC_C:.c=.lst)
LSTS := $(addprefix $(OUT_DIR)/, $(LSTS))

DEPS = $(RES_RES:.res=.d)
DEPS += $(SRC_S:.s=.d)
DEPS += $(SRC_C:.c=.d)
DEPS := $(addprefix $(DEP_DIR)/, $(DEPS))

INCS := -I. -I$(INC_DIR) -I$(RES_DIR) -I$(OUT_DIR) -isystem$(INC_LIB) -isystem$(OUT_DIR_LIB)
DEFAULT_FLAGS := $(EXTRA_FLAGS) -DSGDK_GCC -m68000 -fdiagnostics-color=always -Wall -Wextra -Wno-shift-negative-value -Wno-main -Wno-unused-parameter -fno-builtin -ffunction-sections -fdata-sections -fms-extensions -B$(BIN)
Z80_FLAGS := -i. -i$(SRC_DIR) -i$(INC_DIR) -i$(RES_DIR) -i$(OUT_DIR) -i$(SRC_LIB) -i$(INC_LIB) -i$(INC_LIB)/snd -i$(OUT_DIR_LIB)

ifeq ($(BUILD_TYPE),debug)
	# debug
	FLAGS := $(INCS) $(DEFAULT_FLAGS) -O1 -DDEBUG=1
	CFLAGS := $(FLAGS) -ggdb -g
	AFLAGS := -x assembler-with-cpp -Wa,--register-prefix-optional,--bitwise-or $(FLAGS)
	LIBMD := $(LIB)/libmd_debug.a
else ifeq ($(BUILD_TYPE),asm)
	# asm
	FLAGS := $(INCS) $(DEFAULT_FLAGS) -O3 -fuse-linker-plugin -fno-web -fno-gcse -fno-tree-loop-ivcanon -fomit-frame-pointer
	CFLAGS := $(FLAGS)
	AFLAGS := -x assembler-with-cpp -Wa,--register-prefix-optional,--bitwise-or $(FLAGS)
	LIBMD := $(LIB)/libmd.a
else
	# release
	FLAGS := $(INCS) $(DEFAULT_FLAGS) -O3 -fuse-linker-plugin -fno-web -fno-gcse -fno-tree-loop-ivcanon -fomit-frame-pointer -flto -flto=auto -ffat-lto-objects
	CFLAGS := $(FLAGS)
	AFLAGS := -x assembler-with-cpp -Wa,--register-prefix-optional,--bitwise-or $(FLAGS)
	LIBMD := $(LIB)/libmd.a
endif


.PHONY: default
.PHONY: all
.PHONY: release
.PHONY: Release
.PHONY: debug
.PHONY: Debug
.PHONY: asm
.PHONY: Asm
.PHONY: clean
.PHONY: clean-release
.PHONY: clean-debug
.PHONY: clean-asm
.PHONY: clean-all

default: release
all: release

# include ext.mk if it exists (better to do it after first / default definition)
ifneq ("$(wildcard $(GDK)/ext.mk)","")
    include $(GDK)/ext.mk
endif

Release: release
Debug: debug
Asm: asm
clean: clean-all

release: $(OUT_DIR)/rom.bin $(OUT_DIR)/symbol.txt 
release: padROM
.PHONY: padROM

debug: $(OUT_DIR)/rom.bin $(OUT_DIR)/symbol.txt
debug: injectSymbolsInROM
debug: padROM
.PHONY: injectSymbolsInROM

asm: $(OBJS) $(LSTS)

clean-all:
	$(RM) -r -f out

clean-release: clean-task
clean-debug: clean-task
clean-asm: clean-task

clean-task: 
	$(RM) -r -f $(OUT_DIR)
.PHONY: clean-task


padROM:	$(OUT_DIR)/rom.bin
	$(SIZEBND) $(OUT_DIR)/rom.bin -sizealign 131072 -checksum
	@$(CP) $(OUT_DIR)/rom.bin out/rom.bin

injectSymbolsInROM:	$(OUT_DIR)/rom.bin $(OUT_DIR)/symbol.txt
	$(CONVSYM) $(OUT_DIR)/symbol.txt $(OUT_DIR)/rom.bin -in txt -inopt " /fmt='%X %*[TtBbCcDd] %511s' /offsetFirst+" -range 0 FFFFFF -a -ref @MDDBG__SymbolDataPtr


$(OUT_DIR)/rom.bin: $(OUT_DIR)/rom.out $(OUT_DIR)/symbol.txt
	$(OBJCPY) -O binary $(OUT_DIR)/rom.out $(OUT_DIR)/rom.bin

$(OUT_DIR)/symbol.txt: $(OUT_DIR)/rom.out
	$(NM) $(LTO_PLUGIN) -n -l $(OUT_DIR)/rom.out > $(OUT_DIR)/symbol.txt

$(OUT_DIR)/rom.out: $(OUT_DIR)/sega.o $(OUT_DIR)/cmd_ $(LIBMD)
	@$(MKDIR) -p $(dir $@)
	$(CC) -m68000 -B$(BIN) -n -T $(GDK)/md.ld -nostdlib $(OUT_DIR)/sega.o @$(OUT_DIR)/cmd_ $(LIBMD) $(LIBGCC) -o $(OUT_DIR)/rom.out -Wl,--gc-sections -flto -flto=auto -ffat-lto-objects
	@$(RM) $(OUT_DIR)/cmd_

$(OUT_DIR)/cmd_: $(OBJS)
	@$(MKDIR) -p $(dir $@)
	$(ECHO) "$(OBJS)" > $(OUT_DIR)/cmd_

# NOTE: sega.s references out/rom_head.bin internally
$(OUT_DIR)/sega.o: $(SRC_DIR)/boot/sega.s out/rom_head.bin
	$(CC) $(AFLAGS) -c $(SRC_DIR)/boot/sega.s -o $@

# NOTE: rom_head.bin need to be located in 'out' folder as it's referenced by boot/sega.s
out/rom_head.bin: $(OUT_DIR)/rom_head.o
	$(OBJCPY) -O binary $< $@

$(OUT_DIR)/rom_head.o: $(SRC_DIR)/boot/rom_head.c
	@$(MKDIR) -p $(dir $@)
	$(CC) $(INCS) $(DEFAULT_FLAGS) -c $< -o $@

# SRC_LIB files are "order-only" deps, right of the pipe.  This means we will never overwrite the file in SRC_DIR, even if SRC_LIB is newer.

$(SRC_DIR)/boot/sega.s: | $(SRC_LIB)/boot/sega.s
	$(MKDIR) -p $(dir $@)
	$(CP) $| $@

$(SRC_DIR)/boot/rom_head.c: | $(SRC_LIB)/boot/rom_head.c
	$(MKDIR) -p $(dir $@)
	$(CP) $| $@


# source compilation
$(OUT_DIR)/%.o: %.c $(DEP_DIR)/%.d
	@$(MKDIR) -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

$(OUT_DIR)/%.o: %.s $(DEP_DIR)/%.d
	@$(MKDIR) -p $(dir $@)
	$(CC) $(AFLAGS) -c $< -o $@

$(OUT_DIR)/%.rs: %.res $(DEP_DIR)/%.d
	@$(MKDIR) -p $(dir $@)
	$(RESCOMP) $*.res $(OUT_DIR)/$*.rs
	@$(CP) $(OUT_DIR)/$*.h $*.h
	@$(RM) $(OUT_DIR)/$*.h

$(OUT_DIR)/%.s: %.asm
	@$(MKDIR) -p $(dir $@)
	$(MACCER) -o $@ $<

$(OUT_DIR)/%.o80: %.s80
	@$(MKDIR) -p $(dir $@)
	$(ASMZ80) $(Z80_FLAGS) $< $@ $(OUT_DIR)/out.lst


# listing files
$(OUT_DIR)/%.lst: %.c $(DEP_DIR)/%.d
	@$(MKDIR) -p $(dir $@)
	$(CC) $(CFLAGS) -S -c $< -o $@


# deps files
$(DEP_DIR)/%.d: %.c
	@$(MKDIR) -p $(dir $@)
	$(CC) $(CFLAGS) $< -E -MG -MM -MP -MT $(OUT_DIR)/$*.o -MF $(DEP_DIR)/$*.d

$(DEP_DIR)/%.d: %.s
	@$(MKDIR) -p $(dir $@)
	$(CC) $(AFLAGS) $< -E -MG -MM -MP -MT $(OUT_DIR)/$*.o -MF $(DEP_DIR)/$*.d

$(DEP_DIR)/%.d: %.res
	@$(MKDIR) -p $(dir $@)
	@$(MKDIR) -p $(dir $(OUT_DIR)/$*.o)
	$(RESCOMP) $*.res $(OUT_DIR)/$*.rs -dep $(OUT_DIR)/$*.o
	@$(CP) $(OUT_DIR)/$*.h $*.h
	@$(RM) $(OUT_DIR)/$*.h
	@$(CP) $(OUT_DIR)/$*.d $(DEP_DIR)/$*.d
	@$(RM) $(OUT_DIR)/$*.d


# intermediates files
$(OUT_DIR)/%.o: $(OUT_DIR)%.s
	@$(MKDIR) -p $(dir $@)
	$(CC) $(AFLAGS) -c $< -o $@

$(OUT_DIR)/%.o: $(OUT_DIR)/%.rs 
	@$(MKDIR) -p $(dir $@)
	$(CC) $(AFLAGS) -c $< -o $@

$(OUT_DIR)/%.s: $(OUT_DIR)/%.o80
	@$(MKDIR) -p $(dir $@)
	$(BINTOS) $<


ifeq ($(CLEAN),FALSE)
-include $(DEPS)
endif
