MAKEFILE_DIR := $(dir $(lastword $(MAKEFILE_LIST)))
MAKEFILE_DIR := $(subst \,/,$(MAKEFILE_DIR))

ifneq ("$(wildcard $(MAKEFILE_DIR)bin/rescomp.jar)","")
    GDK := $(patsubst %/,%,$(MAKEFILE_DIR))
endif

include $(GDK)/common.mk

SRC := src
RES := res
INCLUDE := inc

SOURCES := $(shell $(FIND) $(SRC) -type d -wholename "$(SRC)/boot" -prune -o -type f)
SRC_CPP := $(filter %.cpp, $(SOURCES))
SRC_C	:= $(filter %.c, $(SOURCES))
SRC_S 	:= $(filter %.s, $(SOURCES))
SRC_ASM := $(filter %.asm, $(SOURCES))
SRC_S80 := $(filter %.s80, $(SOURCES))

RESSRC  := $(shell $(FIND) $(RES))
RES_C   := $(filter %.c, $(RESSRC))
RES_S   := $(filter %.s, $(RESSRC))
RES_RES := $(filter %.res, $(RESSRC))
RES_RS  := $(RES_RES:.res=.rs)
RES_H 	:= $(RES_RES:.res=.h)
RES_DEP := $(RES_RES:.res=.d)
RES_DEPS:= $(addprefix out/, $(RES_DEP))

OBJ := $(RES_RES:.res=.o)
OBJ += $(RES_S:.s=.o)
OBJ += $(RES_C:.c=.o)
OBJ += $(SRC_S80:.s80=.o)
OBJ += $(SRC_ASM:.asm=.o)
OBJ += $(SRC_S:.s=.o)
OBJ += $(SRC_C:.c=.o)
OBJ += $(SRC_CPP:.cpp=.o)
OBJS:= $(addprefix out/, $(OBJ))
DEPS:= $(OBJS:.o=.d)


LST:= $(SRC_C:.c=.lst)
LSTS:= $(addprefix out/, $(LST))

INCS:= -I$(INCLUDE) -I$(SRC) -I$(RES) -I$(INCLUDE_LIB) -I$(RES_LIB)

DEFAULT_FLAGS 	:= $(EXTRA_FLAGS) 			 \
				   -DSGDK_GCC 				 \
				   -m68000 					 \
				   -mtune=68000 			 \
				   -Wall 					 \
				   -Wextra 					 \
				   -Wno-shift-negative-value \
				   -Wno-main 				 \
				   -Wno-unused-parameter     \
				   -Wno-write-strings 		 \
				   -fno-builtin 			 \
				   -fdiagnostics-color=always\
				   -ffunction-sections  	 \
				   -fdata-sections 	  		 \
				   -fno-strict-aliasing 	 \
				   $(INCS) 					 \
				   -L$(LIB)

CPPFLAGS 		:= -std=gnu++17  			\
				   -fno-rtti 				\
				   -fno-exceptions 			\
				   -fno-non-call-exceptions \
				   -fno-use-cxa-atexit 		\
             	   -fno-common 				\
             	   -fno-threadsafe-statics  \
             	   -fno-unwind-tables

FLAGSZ80:= -i$(SRC) -i$(INCLUDE) -i$(RES) -i$(SRC_LIB) -i$(INCLUDE_LIB)

release: FLAGS= $(DEFAULT_FLAGS) 		\
				-fuse-linker-plugin 	\
				-flto 					\
				-O3 					\
				-fno-web 				\
				-fno-gcse 				\
				-fno-unit-at-a-time 	\
				-fomit-frame-pointer   	\
				-ffast-math

release: LIBMD= -lmd
release: pre-build out/rom.bin out/symbol.txt

debug: FLAGS= $(DEFAULT_FLAGS) -O1 -ggdb -DDEBUG=1
debug: LIBMD= -lmd_debug
debug: pre-build out/rom.bin out/rom.out out/symbol.txt

asm: FLAGS= $(DEFAULT_FLAGS) 			\
				-fuse-linker-plugin 	\
				-flto 					\
				-O3 					\
				-fno-web 				\
				-fno-gcse 				\
				-fno-unit-at-a-time 	\
				-fomit-frame-pointer   	\
				-ffast-math 			\
				-S

asm: pre-build $(LSTS)


all: release
default: release

Default: release
Debug: debug
Release: release
Asm: asm

.PHONY: clean

cleantmp:
	@$(RM) -f $(RES_RS)

cleandep:
	@$(RM) -f $(DEPS)

cleanlst:
	@$(RM) -f $(LSTS)

cleanres: cleantmp
	@$(RM) -f $(RES_H) $(RES_DEP) $(RES_DEPS)

cleanobj:
	@$(RM) -f $(OBJS) out/sega.o out/rom_head.bin out/rom_head.o out/rom.out

distclean: cleanobj cleanres cleanlst cleandep cleantmp
	@$(RM) -f out.lst out/symbol.txt out/rom.nm out/rom.wch
	@$(RM) -rf out/src out/res

clean: cleanobj cleanres cleanlst cleandep
	@$(ECHO) " Clean artifacts"
	@$(RM) -f out.lst out/symbol.txt out/rom.nm out/rom.wch out/rom.bin

cleanrelease: clean

cleandebug: clean

cleanasm: cleanlst

cleandefault: clean
cleanDefault: clean

cleanRelease: cleanrelease
cleanDebug: cleandebug
cleanAsm: cleanasm

pre-build:
	@$(MKDIR) -p $(SRC)/boot
	@$(MKDIR) -p out


out/rom.bin: out/rom.out
	@$(OBJCPY) -O binary $< $@
	@$(SIZEBND) $@ -sizealign 131072 -checksum

out/symbol.txt: out/rom.out
	@$(NM) --plugin=$(PLUGIN) -n $< > $@

out/rom.out: out/sega.o $(OBJS)
	@$(CC) -n -T $(GDK)/md.ld $^ -L$(LIB) $(LIBMD) -lgcc -lc -lsys -lm -lcpp -lstdc++ \
	-o $@ -Wl,--gc-sections

out/sega.o: $(SRC)/boot/sega.s out/rom_head.bin
	@$(CC) -x assembler-with-cpp $(DEFAULT_FLAGS) -c $(SRC)/boot/sega.s -o $@

out/rom_head.bin: out/rom_head.o
	@$(OBJCPY) -O binary $< $@

out/rom_head.o: $(SRC)/boot/rom_head.c
	@$(CC) $(DEFAULT_FLAGS) -c $< -o $@

$(SRC)/boot/sega.s: $(SRC_LIB)/boot/sega.s
	@$(CP) $< $@

$(SRC)/boot/rom_head.c: $(SRC_LIB)/boot/rom_head.c
	@$(CP) $< $@

out/%.lst: %.c
	@$(ECHO) " CC $(notdir $<)"
	@$(MKDIR) -p $(dir $@)
	@$(CC) $(FLAGS) -c $< -o $@

out/%.o: %.cpp
	@$(ECHO) " CXX $(notdir $<)"
	@$(MKDIR) -p $(dir $@)
	@$(CXX) $(FLAGS) $(CPPFLAGS) -MMD -c $< -o $@

out/%.o: %.c
	@$(ECHO) " CC $(notdir $<)"
	@$(MKDIR) -p $(dir $@)
	@$(CC) $(FLAGS) -MMD -c $< -o $@

out/%.o: %.s
	@$(ECHO) " AS $(notdir $<)"
	@$(MKDIR) -p $(dir $@)
	@$(CC) -x assembler-with-cpp $(FLAGS) -MMD -c $< -o $@

out/%.o: %.rs
	@$(MKDIR) -p $(dir $@)
	@$(CC) -x assembler-with-cpp $(FLAGS) -c $*.rs -o $@
	@$(CP) $*.d out/$*.d
	@$(RM) $*.d

%.rs: %.res
	@$(RESCOMP) $*.res $*.rs -dep out/$*.o

%.s: %.asm
	@$(MACCER) -o $@ $<

%.o80: %.s80
	@$(ASMZ80) $(FLAGSZ80) $< $@ out.lst

%.s: %.o80
	@$(BINTOS) $<

-include $(DEPS)
